# This workflow will install Python dependencies, and run the tests for our project

name: Test

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  issues: write
  pull-requests: write

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12", "3.13"]
        runs-on: [ubuntu-latest]
        mcp-extra: [true, false]

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install just
        run: |
          sudo apt update
          sudo snap install --edge --classic just

      - name: Set up Poetry
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry

      - name: Cache Poetry virtualenv and dependencies
        id: cache-poetry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            ~/.virtualenvs
          key: poetry-${{ runner.os }}-${{ matrix.python-version }}-${{matrix.mcp-extra}}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            poetry-${{ runner.os }}-${{ matrix.python-version }}-

      - name: Install dependencies
        if: matrix.mcp-extra == false
        run: poetry install

      - name: Install all extras
        if: matrix.mcp-extra == true
        run: poetry install --all-extras

      - name: Test with pytest
        run: |
          just test-all

      - name: Coverage comment
        uses: MishaKav/pytest-coverage-comment@main
        if: github.event_name == 'pull_request' && matrix.python-version == '3.13' && matrix.mcp-extra == true
        with:
          pytest-xml-coverage-path: ./coverage.xml
          junitxml-path: ./pytest.xml
          title: Coverage Report
          report-only-changed-files: true
